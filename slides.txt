.. -*- mode: rst -*-
.. include:: <s5defs.txt>
.. include:: ui/beamerdefs.txt

.. raw:: html
    :file: includes/logo.html

====================================
 Deploying Erlang Services at Mochi
====================================

:Author:
    Bob Ippolito (@etrepum)
:Date:
    October 2010
:Venue:
    ECUG 2010 (Beijing)

Mochi Media
===========

* Gaming platform (ads, currency, social, scores, …)
* Python, JavaScript, Erlang
* Subsidiary of Shanda Games (盛大游戏)
* Mochi US (San Francisco) + Mochi China (Shanghai)

Why Erlang
==========

* Straightforward network programming
* Multi-core, multi-node
* Reliable VM and standard library
* Hot code loading
* Pattern matching + binaries

How much Erlang
===============

* 2 internal libraries
* 18 internal services
* 10 open source projects (4 by Mochis)

What's not Erlang
=================

* Most scripts
* Anything that speaks HTML
* Anything that speaks to SQL db
* Off the shelf software (nginx, PostgreSQL, …)

Developer Tools
===============

* "/mochi" for Mac OS X (localdev) and CentOS (prod)
* mostly git, actively hunting down legacy svn
* Erlang R13B04 (R14B soon)
* Editor of choice (but mostly Emacs-based)

Common Library
==============

* OTP (of course!)
* mochierl_lib (internal code + open source as deps)
* rebar (build tool of choice)

Testing Tools
=============

* eunit
* effigy
* meck (a better effigy)
* ``./rebar skip_deps=true eunit``

Developer Services (open source)
================================

:gitweb + cgit:
    may switch to cgit-only
:Trac:
    do not want
:OpenGrok:
    code search
:Hudson:
    continuous integration

Developer Services (internal)
=============================

:juanita:
    IRC bot extraordinaire
:docportal:
    Documentation portal. Sphinx + erldocs = win.

What We Don't Use
=================

:OTP releases:
    We probably should, for safer upgrade/downgrade
:Heartbeat:
    We use daemontools instead, works better for us

What We Avoid
=============

:Erlang Distribution:
    Has downsides, we limit it to application clusters by cookie. Use other protocols.
:Mnesia:
    Bad at network partitions, but they are inevitable. 2GB limit. Headaches.

What We Should Use
==================

:RabbitMQ:
    Nice reliable communication.
:Riak:
    Better partition tolerance, fewer problems than mnesia.

Node Naming
===========

:flavor:
    localdev, dev, prod
:service_name:
    ``${app_name}_${flavor}``, special case of ``${app_name}`` for prod
:node name:
    ``-name ${service_name}\@${ip_address}``

Name-based Decisions
====================

* ``-setcookie ${hash of service_name}``
* ``-connect_all false`` to force "cluster" isolation
* app_name embedded in profiler output
* "IDC Cluster" DNS ``${prefix}.erl.${idc}``, e.g. ``app-dev.erl.us1.example.com``

DNS based tools
===============

* Tail all logs from all nodes in a cluster
* Upgrade code on all nodes in a cluster
* Get statistics from nodes in a cluster
* Find all clusters in an IDC

mochinames
==========

* Abstracts DNS calls, works around bugs
* Node name, flavor, etc. code
* Cookies

mochidiscover3
==============

* Adds node IP A record to IDC cluster DNS
* Sets node cookie
* connect_node to nodes in IDC cluster

mochidist
=========

* Find nodes in an IDC cluster (siblings)
* Variation of rpc:multicall to prevent stampede

mochideploy
===========

* Update/build/reload code to local node or IDC cluster
* Mostly just wraps rebar and git

Multiple IDC problems
=====================

* Work in progress
* China <-> US incredibly difficult
* Latency and packet loss is high
* Erlang Distribution absolutely terrible for this

Multiple IDC "solution"
=======================

* Separate DNS, separate "IDC clusters"
* Using VPN + HTTP now, investigating RabbitMQ + Shovel
* Investigating Riak EnterpriseDS replication


Questions?
==========

:Twitter:
  @etrepum
:Blog:
  http://bob.pythonmac.org/
:Mochi US:
  http://en.mochimedia.com/
:Mochi China:
  http://zh-cn.mochimedia.com/
:Open Source:
  http://mochi.github.com/
:Email:
  bob@mochimedia.com (we're hiring!)
