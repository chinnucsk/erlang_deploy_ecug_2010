.. -*- mode: rst -*-
.. include:: <s5defs.txt>
.. include:: ui/beamerdefs.txt

.. raw:: html
    :file: includes/logo.html

====================================
 Deploying Erlang Services at Mochi
====================================

:Author:
    Bob Ippolito (@etrepum)
:Date:
    October 2010
:Venue:
    ECUG 2010 (Beijing)

Mochi Media
===========

* Gaming platform (monetization, social, …)
* Erlang, Python, JavaScript, ActionScript 2 and 3
* Subsidiary of Shanda Games (盛大游戏)
* Mochi US (San Francisco)
* Mochi China (Shanghai)

Why Erlang?
===========

* Straightforward network programming
* Multi-core, multi-node
* Reliable VM and standard library
* Hot code loading
* Pattern matching + binaries

How much Erlang
===============

* 2 internal libraries
* 18 internal services
* 10 open source projects (4 by Mochis)

What's not Erlang
=================

* Most scripts
* Anything that speaks HTML
* Anything that speaks to SQL db
* Off the shelf software (nginx, PostgreSQL, …)

Developer Tools
===============

* "/mochi" for Mac OS X (localdev) and CentOS (prod)
* mostly git, actively hunting down legacy svn
* Erlang R13B04 (R14B soon)
* Editor of choice (but mostly Emacs-based)

"/mochi"
========

* Full pre-built development toolchain
* Erlang R13B04, Python, etc.
* Same structure for CentOS and Mac OS X
* Also includes internal scripts and shell profile

Erlang Common Library
=====================

* OTP (of course!)
* mochierl_lib (internal)
* open source dependencies (mochiweb, …)
* rebar (build tool of choice)

Testing Tools
=============

* eunit
* effigy
* meck (a better effigy)
* ``./rebar skip_deps=true eunit``

Rebar
=====

* Each project gets a rebar.config
* Dependencies all on internal git
* Internal git mirrors of open source projects, updated daily
* Some config customizations

rebar.config
============

::

    {erl_opts, [debug_info]}.
    {deps, […]}.
    {cover_enabled, true}.
    {eunit_opts,
      [verbose,
       {report,{eunit_surefire,[{dir,"."}]}}]}.
    {mib_opts, [{group_check, false}]}.

Future Rebar
============

* Better support for having internal mirrors of open source
* Support for updating dependencies in-place like mochideploy
* We should use it for project templates
* Maybe use it for migrating towards OTP releases

Developer Services (open source)
================================

* **gitweb + cgit**:
  may switch to cgit-only
* **Trac**:
  do not want
* **OpenGrok**:
  code search
* **Hudson**:
  continuous integration

Developer Services (internal)
=============================

* **juanita**:
  IRC bot extraordinaire
* **docportal**:
  Documentation (Sphinx and erldocs)

What We Don't Use
=================

* **OTP releases**:
  We probably should, for safer upgrade/downgrade
* **Heartbeat**:
  We use daemontools instead, works better for us

What We Avoid
=============

* **Erlang RPC**:
  Significant downsides, we limit it to application clusters by
  cookie. Use other protocols.
* **Mnesia**:
  Bad at network partitions, but they are inevitable.
  2GB limit. Headaches.

What We Should Use
==================

* **RabbitMQ**:
  Nice reliable communication.
* **Riak**:
  Better partition tolerance, fewer problems than mnesia.

Node Naming
===========

* **flavor**:
  localdev, dev, prod
* **service_name**:
  ``${app_name}_${flavor}``,
  special case of ``${app_name}`` for prod
* **node name**:
  ``-name ${service_name}\@${ip_address}``

Name-based Decisions
====================

* ``-setcookie ${hash of service_name}``
* ``-connect_all false`` to force "cluster" isolation
* app_name embedded in profiler output
* "IDC Cluster" DNS ``${prefix}.erl.${idc}``, e.g. ``app-dev.erl.us1.example.com``

DNS based tools
===============

* Tail all logs from all nodes in a cluster
* Upgrade code on all nodes in a cluster
* Get statistics from nodes in a cluster
* Find all clusters in an IDC

mochinames
==========

* Abstracts DNS calls, works around bugs
* Node name, flavor, etc. code
* Cookies

mochidiscover3
==============

* Adds node IP A record to IDC cluster DNS
* Sets node cookie
* connect_node to nodes in IDC cluster

mochidist
=========

* Find nodes in an IDC cluster (siblings)
* Variation of rpc:multicall to prevent stampede

mochideploy
===========

* Update/build/reload code to local node or IDC cluster
* Mostly just wraps rebar and git

Multiple IDC problems
=====================

* Work in progress
* China <-> US incredibly difficult
* Latency and packet loss is high
* Erlang Distribution absolutely terrible for this

Multiple IDC "solution"
=======================

* Separate DNS, separate "IDC clusters"
* Using VPN + HTTP now, investigating RabbitMQ + Shovel
* Investigating Riak EnterpriseDS replication

mochiprofiler
=============

* gen_server running in every app
* Implements ``"/stats"`` URL in every app
* Tracks app counters in ETS table
* Tracks timings in gb_tree
* Reports on other Erlang info (mnesia, memory, etc.)

Hudson
======

* Java-based continuous integration software
* Checks out software
* Builds, runs test and coverage suites
* Sends email and IRC alerts of test failure
* VERY USEFUL!

UDPLog + Scribe
===============

* UDPLog is our simple JSON over UDP logging protocol
* Scribe streams and aggregates log data from UDPLog
* OpenNMS graphs data collected by Scribe

Hardware
========

* Juniper routers
* Using A10 hardware load balancers
* Virtual IPs forward to Erlang services
* Servers with IPMI

Ops Platform
============

* CentOS (Linux)
* Puppet
* Daemontools
* OpenNMS

Puppet
======

* Deploys OS and software to machines
* Manages IDC configuration
* Manages server configuration
* Great to deploy more machines
* Reproducible

Puppet Lifecycle
================

* Server POST (Power-on self-test)
* PXE boot (Preboot eXecution Environment)
* Wait at prompt for Kickstart or OS boot (Use IPMI console to select)
* OS boot runs Puppet every 30 min

Daemontools
===========

* Switches UID/GID
* Separate logging/supervision processes
* Restarts services
* Would be nice if Erlang had accessible POSIX signal support

OpenNMS
=======

* Java-based Network Monitoring System
* RRD resource graphs of mochiprofiler data
* Alerts on warnings and outages
* Sends alerts through pages, email, IRC

Git Workflow
============

* Work in branch based on ticket, e.g. feature-1234
* Push branch to central repository
* Re-assign ticket for code review and verify
* If code passes, merge to master and deploy

Code Review
===========

* Currently done manually by asking in Trac
* Reviewer responsible for generating good diffs
* cgit is better than gitweb for this purpose
* Looking at software to help, e.g. Rietveld or Gerrit

Future Workflow
===============

* Require tests to pass with Hudson? Integrate Dialyzer?
* Require code review to pass with Gerrit?
* A work in progress, we switched to Git this year

Questions?
==========

:Twitter:
  @etrepum
:Blog:
  http://bob.pythonmac.org/
:Mochi US:
  http://en.mochimedia.com/
:Mochi China:
  http://zh-cn.mochimedia.com/
:Open Source:
  http://mochi.github.com/
:Email:
  bob@mochimedia.com

(we're hiring!)
